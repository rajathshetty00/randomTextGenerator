{"version":3,"sources":["component/Output.js","component/controls/Select.js","component/controls/Text.js","App.js","serviceWorker.js","index.js"],"names":["Output","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","react_default","a","createElement","className","Component","Select","e","setState","target","onChange","onChangeH","bind","Text","type","App","paras","html","text","getSampleText","_this2","axios","get","then","response","data","console","log","catch","error","x","num","controls_Select","showHtmlH","controls_Text","changeParas","src_component_Output","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1c61881c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"../component/Output.css\";\n\nclass Output extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: props.value\n    };\n  }\n\n  render() {\n    return <div className=\"output\">{this.props.value}</div>;\n  }\n}\n\nexport default Output;\n","import React, { Component } from \"react\";\n\nclass Select extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: props.value\n    };\n  }\n\n  onChangeH(e) {\n    this.setState(\n      {\n        value: e.target.value\n      },\n      function() {\n        this.props.onChange(this.state.value);\n      }\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <select className=\"form-control\" onChange={this.onChangeH.bind(this)}>\n          <option value=\"html\">Yes</option>\n          <option value=\"text\">No</option>\n        </select>\n      </div>\n    );\n  }\n}\n\nexport default Select;\n","import React, { Component } from \"react\";\n\nclass Text extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: props.value\n    };\n  }\n\n  onChangeH(e) {\n    this.setState(\n      {\n        value: e.target.value\n      },\n      function() {\n        this.props.onChange(this.state.value);\n      }\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <input\n          className=\"form-control\"\n          type=\"number\"\n          value={this.state.value}\n          onChange={this.onChangeH.bind(this)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Text;\n","import React, { Component } from \"react\";\nimport Output from \"./component/Output\";\nimport Select from \"./component/controls/Select\";\nimport Text from \"./component/controls/Text\";\n\nimport \"./App.css\";\nimport axios from \"axios\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      paras: 2,\n      html: \"html\",\n      text: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.getSampleText();\n  }\n\n  getSampleText() {\n    axios\n      .get(\n        \"https://baconipsum.com/api/?type=all-meat&paras=\" +\n          this.state.paras +\n          \"&start-with-lorem=1&format=\" +\n          this.state.html\n      )\n      .then(response => {\n        this.setState({ text: response.data }, function() {\n          console.log(response.data);\n        });\n      })\n      .catch(error => console.log(error));\n  }\n\n  showHtmlH(x) {\n    this.setState(\n      {\n        html: x\n      },\n\n      this.getSampleText\n    );\n  }\n\n  changeParas(num) {\n    this.setState({ paras: num }, this.getSampleText);\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>React Random Text Generator</h1>\n        <hr />\n        <form className=\"form-group\">\n          <div className=\"form-group\">\n            <label>Include html</label>\n            <br />\n            <Select\n              value={this.state.html}\n              onChange={this.showHtmlH.bind(this)}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label>ParaGraphs</label>\n            <br />\n            <Text\n              value={this.state.paras}\n              onChange={this.changeParas.bind(this)}\n            />\n          </div>\n        </form>\n        <Output value={this.state.text} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}